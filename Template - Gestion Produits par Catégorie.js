/**
 * @file Template - Gestion de Cours par Cat√©gorie
 * @description Script Google Apps pour lire et assembler des donn√©es de cours structur√©es
 * ¬† ¬† ¬† ¬† ¬† ¬† ¬†√† partir de plusieurs feuilles dans un Google Sheet.
 * @version 1.0.2 (Correction TypeError setHeader et getCategoryName)
 * @author Gemini Code Assist
 */

// --- CONFIGURATION ---

// URL du script central qui g√®re le catalogue. Ce script l'appellera pour invalider le cache.
const CENTRAL_ADMIN_API_URL = "https://script.google.com/macros/s/AKfycbxh1olxmG44KS1Gq_RA6zviC6M1xQkIUYr_0KeAS4qNILwypNLXYNQHcqFwiP9Rg5tWFw/exec";
const ALLOWED_ORIGIN = 'https://junior-senior-gaps-killer.vercel.app'; // Domaine autoris√© pour CORS

// --- GESTIONNAIRES D'√âV√âNEMENTS (TRIGGERS) ---

/**
 * Cr√©e un menu personnalis√© √† l'ouverture de la feuille de calcul.
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('Gestion des Cours')
      .addItem('üöÄ Initialiser les feuilles de cours', 'setupCourseSheets')
      .addSeparator()
      .addItem('‚ûï Ajouter un Cours', 'addCourse')
      .addItem('‚ûï Ajouter un Module', 'addModule')
      .addItem('‚ûï Ajouter un Chapitre', 'addChapter')
      .addSeparator()
      .addItem('üóëÔ∏è Supprimer les donn√©es de d√©mo', 'clearDemoData')
      .addSeparator()
      .addItem('Forcer la mise √† jour du cache global', 'invalidateGlobalCache')
      .addToUi();
}

/**
 * Se d√©clenche automatiquement √† chaque modification de la feuille.
 * Invalide le cache global pour que le front-end r√©cup√®re les nouvelles donn√©es.
 */
function onEdit(e) {
  Logger.log("Modification d√©tect√©e. Invalidation du cache global demand√©e.");
  invalidateGlobalCache();
}

// --- POINTS D'ENTR√âE DE L'API WEB (doGet, doPost, doOptions) ---

/**
 * G√®re les requ√™tes OPTIONS pour le pr√©-vol CORS. Essentiel pour les requ√™tes POST.
 */
function doOptions(e) {
  // R√©pond aux requ√™tes de pr√©-v√©rification CORS
  return ContentService.createTextOutput()
    .setHeader('Access-Control-Allow-Origin', ALLOWED_ORIGIN)
    .setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS')
    .setHeader('Access-Control-Allow-Headers', 'Content-Type');
}

// --- CONFIGURATION ---
const CENTRAL_SHEET_ID = "1xcW_lPim1AvD-RWDD0FtpAMYSrWq-FSv9XGa1ys2Xv4"; // IMPORTANT: ID de la feuille centrale
const DEFAULT_IMAGE_URL = "https://i.postimg.cc/X3zY8dfN/cree-oi-un-logo-fiuturiste-de-ABMedu-un-eplatforme-de-ellernnig-la-couleur-est-le-degrader-bleu-mari.jpg";


/**
 * Point d'entr√©e pour les requ√™tes GET.
 * L'action principale est `getProducts` (conserv√© pour la compatibilit√©) qui renvoie les fiches de cours compl√®tes.
 */
function doGet(e) {
  const origin = (e && e.headers && (e.headers.Origin || e.headers.origin)) || null;
  try {
    const action = e.parameter.action;

    if (action === 'getProducts') {
      const categoryName = getCategoryName();
      const fichesCours = getAllCoursData(categoryName);
      const responseData = { success: true, data: fichesCours };
      return createJsonResponse(responseData, origin);
    }

    return createJsonResponse({ success: false, error: "Action GET non reconnue." }, origin);
  } catch (error) {
    Logger.log("ERREUR dans doGet : " + error.toString());
    return createJsonResponse({ success: false, error: error.message }, origin);
  }
}

/**
 * Point d'entr√©e pour les requ√™tes POST. Actuellement non utilis√©, mais pr√™t pour de futures actions.
 */
function doPost(e) {
  const origin = (e && e.headers && (e.headers.Origin || e.headers.origin)) || null;
  try {
    const request = JSON.parse(e.postData.contents);
    const { action, data } = request;

    switch (action) {
      case 'addCourseFromDashboard':
        return addCourseFromDashboard(data, origin);
      default:
        return createJsonResponse({ success: false, error: `Action POST non reconnue: ${action}` }, origin);
    }

  } catch (error) {
    Logger.log("ERREUR dans doPost : " + error.toString());
    return createJsonResponse({ success: false, error: error.message }, origin);
  }
}

// --- LOGIQUE M√âTIER : ASSEMBLAGE DES DONN√âES DE COURS ---

/**
 * Fonction principale qui orchestre la r√©cup√©ration et l'assemblage de toutes les donn√©es de cours.
 * @param {string} categoryName - Le nom de la cat√©gorie (ex: "Backend").
 * @returns {Array<Object>} Un tableau de fiches de cours compl√®tes.
 */
function getAllCoursData(categoryName) {
  Logger.log(`D√©but de l'assemblage pour la cat√©gorie : ${categoryName}`);

  // 1. Lire toutes les donn√©es de toutes les feuilles en une seule fois pour l'efficacit√©.
  const allData = {
    cours: sheetToJSON(SpreadsheetApp.getActiveSpreadsheet().getSheetByName(`Cours_${categoryName}`)),
    modules: sheetToJSON(SpreadsheetApp.getActiveSpreadsheet().getSheetByName(`Modules_${categoryName}`)),
    chapitres: sheetToJSON(SpreadsheetApp.getActiveSpreadsheet().getSheetByName(`Chapitres_${categoryName}`)),
    quizChapitres: sheetToJSON(SpreadsheetApp.getActiveSpreadsheet().getSheetByName(`Quiz_Chapitres_${categoryName}`)),
    quizModules: sheetToJSON(SpreadsheetApp.getActiveSpreadsheet().getSheetByName(`Quiz_Modules_${categoryName}`))
  };

  Logger.log(`Donn√©es brutes lues : ${allData.cours.length} cours, ${allData.modules.length} modules, ${allData.chapitres.length} chapitres.`);

  // 2. Pour chaque cours, g√©n√©rer sa fiche compl√®te.
  const fichesCompletes = allData.cours.map(cours => generateFicheCours(cours.ID_Cours, allData));

  Logger.log("Toutes les fiches de cours ont √©t√© g√©n√©r√©es.");
  return fichesCompletes.filter(f => f !== null);
}

/**
 * G√©n√®re une fiche de cours compl√®te et structur√©e pour un ID de cours donn√©.
 * @param {string} idCours - L'ID du cours √† assembler.
 * @param {Object} allData - Un objet contenant les donn√©es de toutes les feuilles.
 * @returns {Object} La fiche de cours compl√®te.
 */
function generateFicheCours(idCours, allData) {
  Logger.log(`G√©n√©ration de la fiche pour le cours ID: ${idCours}`);

  // 1. Trouver le cours de base.
  const coursBase = allData.cours.find(c => c.ID_Cours == idCours);
  if (!coursBase) {
    Logger.log(`Cours ID: ${idCours} non trouv√©.`);
    return null;
  }

  // 2. R√©cup√©rer les modules pour ce cours.
  const modulesDuCours = getModulesByCours(idCours, allData.modules);

  // 3. Pour chaque module, r√©cup√©rer ses chapitres et ses quiz.
  modulesDuCours.forEach(module => {
    // R√©cup√©rer les chapitres du module
    const chapitresDuModule = getChapitresByModule(module.ID_Module, allData.chapitres);

    // Pour chaque chapitre, r√©cup√©rer ses quiz
    chapitresDuModule.forEach(chapitre => {
      chapitre.quiz = getQuizByChapitre(chapitre.ID_Chapitre, allData.quizChapitres);
    });

    module.chapitres = chapitresDuModule;
    module.quiz = getQuizByModule(module.ID_Module, allData.quizModules);
  });

  // 4. Assembler la fiche finale.
  const ficheFinale = {
    ...coursBase,
    modules: modulesDuCours
  };

  logFiche(ficheFinale);
  return ficheFinale;
}

// --- FONCTIONS DE R√âCUP√âRATION DE DONN√âES (FILTRAGE) ---

function getModulesByCours(idCours, allModules) {
  return allModules.filter(m => m.ID_Cours == idCours).sort((a, b) => a.Ordre_Module - b.Ordre_Module);
}

function getChapitresByModule(idModule, allChapitres) {
  return allChapitres.filter(c => c.ID_Module == idModule).sort((a, b) => a.Ordre_Chapitre - b.Ordre_Chapitre);
}

function getQuizByChapitre(idChapitre, allQuiz) {
  return allQuiz.filter(q => q.ID_Chapitre == idChapitre);
}

function getQuizByModule(idModule, allQuiz) {
  return allQuiz.filter(q => q.ID_Module == idModule);
}

// --- FONCTIONS UTILITAIRES ---

/**
 * Renvoie uniquement le nom de la cat√©gorie (ex: "Backend") √† partir du nom de la feuille (ex: "Cours_Backend").
 */
function getCategoryName() {
  const sheetName = SpreadsheetApp.getActiveSpreadsheet().getSheets()[0].getName();
  // On retire le pr√©fixe "Cours_" pour obtenir uniquement le nom de la cat√©gorie
  return sheetName.replace('Cours_', '');
}

function initialiserAvecDonn√©esD√©mos() {
  const categoryName = getCategoryName();
  seedDefaultCourseData(categoryName);
  SpreadsheetApp.getUi().alert(`Les feuilles ont √©t√© remplies avec des donn√©es d'exemple pour la cat√©gorie "${categoryName}".`);
}
/**
 * Utilitaire pour invalider le cache global en appelant le script central.
 */
function invalidateGlobalCache() {
  // Appelle le script central pour lui dire de mettre √† jour la version du cache.
  UrlFetchApp.fetch(CENTRAL_ADMIN_API_URL + "?action=invalidateCache", {
    method: 'get', muteHttpExceptions: true
  });
  Logger.log("Demande d'invalidation du cache global envoy√©e.");
}

/**
 * Cr√©e une r√©ponse JSON standard.
 * CORRECTION: Suppression des appels √† setHeader qui causaient l'erreur TypeError.
 */
function createJsonResponse(data, origin) {
  const output = ContentService.createTextOutput(JSON.stringify(data));
  output.setMimeType(ContentService.MimeType.JSON);
  // La gestion CORS pour GET est assur√©e par la configuration du d√©ploiement
  // et la fonction doOptions pour le pre-flight.
  return output;
}

/**
 * Utilitaire pour convertir une feuille en JSON.
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet - La feuille √† convertir.
 * @returns {Array<Object>} Un tableau d'objets repr√©sentant les lignes.
 */
function sheetToJSON(sheet) {
  if (!sheet || sheet.getLastRow() < 2) return [];
  const data = sheet.getRange(1, 1, sheet.getLastRow(), sheet.getLastColumn()).getValues();
  const headers = data.shift();
  return data.map(row => {
    const obj = {};
    headers.forEach((header, index) => {
      if (header) {
        obj[header] = row[index];
      }
    });
    return obj;
  });
}

/**
 * Affiche une version simplifi√©e de la fiche de cours dans les journaux d'ex√©cution.
 * @param {Object} fiche - La fiche de cours compl√®te.
 */
function logFiche(fiche) {
  Logger.log(`--- FICHE COURS : ${fiche.Nom_Cours} (ID: ${fiche.ID_Cours}) ---`);
  Logger.log(` ¬†Modules: ${fiche.modules.length}`);
  fiche.modules.forEach(m => {
    Logger.log(` ¬† ¬†- Module: ${m.Nom_Module} (Chapitres: ${m.chapitres.length}, Quiz: ${m.quiz.length})`);
  });
  Logger.log('----------------------------------------------------');
}

/**
 * Initialise toutes les feuilles n√©cessaires pour la gestion des cours d'une cat√©gorie.
 */
function setupCourseSheets() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();

  const response = ui.prompt('Configuration', 'Entrez le nom de la cat√©gorie (ex: Backend, DevOps):', ui.ButtonSet.OK_CANCEL);
  if (response.getSelectedButton() !== ui.Button.OK || !response.getResponseText()) {
    ui.alert('Op√©ration annul√©e.');
    return;
  }
  const categoryName = response.getResponseText().trim();
  ss.rename(categoryName); // Renomme la feuille de calcul elle-m√™me

  const sheetStructures = {
    [`Cours_${categoryName}`]: ["ID_Cours", "Nom_Cours", "R√©sum√©", "Dur√©e_Totale", "Niveau", "Prix", "URL_Vid√©o_Intro", "Image_Couverture", "Freemium_Start", "Freemium_End", "Objectifs", "Pr√©requis", "Avantage_Senior", "Public_Cible", "Formateur_Nom", "Formateur_Titre", "Formateur_Bio", "Note_Moyenne", "Avis"],
    [`Modules_${categoryName}`]: ["ID_Cours", "ID_Module", "Nom_Module", "Description_Module", "Dur√©e_Module", "Ordre_Module"],
    [`Chapitres_${categoryName}`]: ["ID_Module", "ID_Chapitre", "Nom_Chapitre", "URL_Vid√©o_Chapitre", "Dur√©e", "Ressource", "Ordre_Chapitre"],
    [`Quiz_Chapitres_${categoryName}`]: ["ID_Chapitre", "Question", "R√©ponse_1", "R√©ponse_2", "R√©ponse_3", "R√©ponse_4", "Bonne_R√©ponse"],
    [`Quiz_Modules_${categoryName}`]: ["ID_Module", "Question", "R√©ponse_1", "R√©ponse_2", "R√©ponse_3", "R√©ponse_4", "Bonne_R√©ponse"]
  };

  // Supprimer les feuilles existantes sauf la premi√®re
  const allSheets = ss.getSheets();
  for (let i = allSheets.length - 1; i > 0; i--) {
    ss.deleteSheet(allSheets[i]);
  }

  let firstSheet = true;
  for (const sheetName in sheetStructures) {
    const headers = sheetStructures[sheetName];
    let sheet;
    if (firstSheet) {
      sheet = ss.getSheets()[0];
      sheet.setName(sheetName);
      sheet.clear();
      firstSheet = false;
    } else {
      sheet = ss.insertSheet(sheetName);
    }
    sheet.appendRow(headers);
    sheet.setFrozenRows(1);
    sheet.getRange(1, 1, 1, headers.length).setFontWeight("bold");
  }

  // CORRECTION: Appeler la fonction pour ajouter les donn√©es de d√©mo juste apr√®s la cr√©ation.
  seedDefaultCourseData(categoryName);
  ui.alert(`Structure de cours pour la cat√©gorie "${categoryName}" initialis√©e et remplie avec des donn√©es de d√©mo !`);
}

/**
 * NOUVEAU: Ajoute des donn√©es d'exemple dans les feuilles fra√Æchement cr√©√©es.
 * @param {string} categoryName - Le nom de la cat√©gorie pour laquelle ajouter les donn√©es.
 */
function seedDefaultCourseData(categoryName) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();

  try {
    // R√©cup√©ration des feuilles
    const coursSheet = ss.getSheetByName(`Cours_${categoryName}`);
    const modulesSheet = ss.getSheetByName(`Modules_${categoryName}`);
    const chapitresSheet = ss.getSheetByName(`Chapitres_${categoryName}`);
    const quizChapitresSheet = ss.getSheetByName(`Quiz_Chapitres_${categoryName}`);
    const quizModulesSheet = ss.getSheetByName(`Quiz_Modules_${categoryName}`);

    // --- Donn√©es d'exemple ---

    // Cours
    const coursData = [
      ["C-001", "Ma√Ætriser l'architecture microservices : les 10 pi√®ges d'un CTO", "Un cours intensif qui va au-del√† des tutoriels basiques pour vous enseigner les strat√©gies et les erreurs √† √©viter, tir√©es de 15 ans d'exp√©rience terrain.", "8h 30min", "Expert", 75000, "https://www.youtube.com/embed/Plq333-4k6E", "https://i.postimg.cc/pX3dYj8B/course-microservices.jpg", "0", "1200", "Ma√Ætriser les patterns de communication; Concevoir des API r√©silientes; G√©rer la consistance des donn√©es.", "Bases en backend; Connaissance des API REST.", "Pensez comme un architecte syst√®me.", "Professionnels du Backend avec 3+ ans d'exp√©rience.", "Jean Dupont", "CTO @ TechInnov", "Apr√®s avoir men√© 3 transformations monolithiques, j'ai condens√© mes le√ßons (et √©checs) dans ce cours.", "4.8", "125 Avis"],
      ["C-002", "React Avanc√© : Hooks, Performance et State Management", "Optimisez vos applications React en ma√Ætrisant les concepts avanc√©s que les tutoriels survolent.", "12h 15min", "Interm√©diaire", 60000, "https://www.youtube.com/embed/N3AkSS5hXMA", "https://i.postimg.cc/Yq7p4Y4j/course-react.jpg", "0", "1200", "Utiliser les hooks personnalis√©s; Optimiser le rendu avec useMemo et useCallback; G√©rer un √©tat global sans Redux.", "Bonnes bases de React (composants, props, state).", "√âcrivez du code React plus propre, plus rapide et plus maintenable.", "Professionnels du Frontend voulant passer au niveau sup√©rieur.", "A√Øcha Diallo", "Lead Frontend Dev @ WebScale", "J'ai vu trop de projets React devenir des usines √† gaz. Ce cours vous donne les cl√©s pour √©viter √ßa.", "4.9", "210 Avis"],
      ["C-003", "CI/CD de A √† Z avec GitLab et Kubernetes", "D√©ployez vos applications en continu et sans stress. Le guide pratique que tout DevOps senior aurait voulu avoir.", "10h 00min", "Interm√©diaire", 80000, "https://www.youtube.com/embed/rG3_c42X_gQ", "https://i.postimg.cc/tJkRzZ6v/course-devops.jpg", "0", "1200", "Cr√©er des pipelines CI/CD complexes; D√©ployer sur un cluster Kubernetes; G√©rer les secrets de mani√®re s√©curis√©e.", "Connaissances de base de Git et Docker.", "Automatisez 90% de vos t√¢ches de d√©ploiement.", "D√©veloppeurs, SysAdmins, et futurs ing√©nieurs DevOps.", "Moussa Traor√©", "Ing√©nieur DevOps Senior", "L'automatisation est une passion. J'ai con√ßu ce cours pour vous faire gagner des centaines d'heures.", "4.7", "98 Avis"],
      ["C-004", "Introduction au Machine Learning avec Python", "Un cours pour les professionnels qui veulent comprendre et appliquer le ML, sans le jargon math√©matique complexe.", "15h 45min", "D√©butant", 55000, "https://www.youtube.com/embed/I_gGAbJ623A", "https://i.postimg.cc/L8yWpB0x/course-ml.jpg", "0", "1200", "Entra√Æner des mod√®les de r√©gression et classification; Utiliser Scikit-Learn et Pandas; √âvaluer la performance d'un mod√®le.", "Bases de Python.", "D√©mythifiez l'IA et construisez votre premier mod√®le pr√©dictif en quelques heures.", "Professionnels curieux du Machine Learning.", "Fatou N'diaye", "Data Scientist @ DataPredict", "Le ML n'est pas de la magie. C'est un outil puissant que je vais vous apprendre √† manier.", "4.8", "350 Avis"],
      ["C-005", "Design System en Pratique pour √âquipes Scalables", "Arr√™tez de r√©inventer la roue. Construisez un Design System qui acc√©l√®re votre d√©veloppement et garantit la coh√©rence.", "7h 20min", "Interm√©diaire", 65000, "https://www.youtube.com/embed/z9hGg122p4w", "https://i.postimg.cc/W1P4gL2d/course-design-system.jpg", "0", "1200", "Structurer un Design System; Documenter les composants avec Storybook; Mettre en place la gouvernance.", "Exp√©rience en d√©veloppement Frontend (React, Vue, etc.).", "Le secret des GAFAM pour scaler leurs interfaces.", "Lead D√©veloppeurs, Designers UI/UX.", "David Lefebvre", "Principal Engineer @ UI-Kit", "Un bon Design System, c'est 50% de la v√©locit√© d'une √©quipe. Je vous montre comment.", "4.9", "180 Avis"],
      ["C-006", "Optimisation de Performance SQL : Requ√™tes et Index", "Vos requ√™tes sont lentes ? Apprenez les techniques de pro pour diviser par 10 le temps de r√©ponse de votre base de donn√©es.", "9h 00min", "Interm√©diaire", 70000, "https://www.youtube.com/embed/H_Ofy5PAjE8", "https://i.postimg.cc/HkC0CjJ9/course-sql.jpg", "0", "1200", "Analyser un plan d'ex√©cution; Cr√©er des index efficaces; R√©√©crire des requ√™tes complexes.", "Bonnes connaissances de SQL (JOIN, GROUP BY).", "Transformez une requ√™te de 5 secondes en une requ√™te de 50 millisecondes.", "Professionnels du Backend, Administrateurs de BDD.", "Carlos Gomez", "Architecte de Donn√©es", "J'ai pass√© 20 ans √† optimiser des bases de donn√©es. Voici mes secrets.", "4.8", "155 Avis"],
      ["C-007", "S√©curit√© Web : Le Guide Pratique de l'OWASP Top 10", "Passez de professionnel √† d√©fenseur. Apprenez √† trouver et corriger les failles de s√©curit√© avant qu'elles ne soient exploit√©es.", "11h 30min", "Interm√©diaire", 75000, "https://www.youtube.com/embed/T8gu61i3G8g", "https://i.postimg.cc/J4fV7Y0Y/course-security.jpg", "0", "1200", "Identifier les injections SQL; Pr√©venir les attaques XSS; S√©curiser l'authentification et les sessions.", "Exp√©rience en d√©veloppement web.", "Le checklist de s√©curit√© que tout professionnel senior doit conna√Ætre.", "Professionnels du web soucieux de la qualit√©.", "Sofia Chen", "Pentester √âthique", "Je suis pay√©e pour casser des sites. Je vous apprends √† les construire pour qu'ils soient incassables.", "4.9", "230 Avis"],
      ["C-008", "Architecture Cloud : AWS vs GCP vs Azure pour les D√©cideurs", "Ne choisissez plus votre cloud au hasard. Comprenez les forces, faiblesses et co√ªts de chaque plateforme.", "6h 00min", "Tous niveaux", 90000, "https://www.youtube.com/embed/j_s2_t4d6sU", "https://i.postimg.cc/d1gSgKzQ/course-cloud.jpg", "0", "1200", "Comparer les services de calcul, stockage et BDD; Estimer les co√ªts d'une architecture; Choisir la bonne plateforme pour un projet.", "Aucun pr√©requis technique.", "La d√©cision la plus importante de votre projet, expliqu√©e simplement.", "CTOs, Chefs de projet, Architectes.", "Omar Benali", "Consultant Cloud Ind√©pendant", "J'aide les entreprises √† choisir le bon cloud. Ce cours est la synth√®se de mes missions.", "4.7", "80 Avis"],
      ["C-009", "Gestion de Projet Agile pour Leaders Techniques", "Devenez le Leader que tout le monde veut suivre. Ma√Ætrisez Scrum et Kanban du point de vue technique et manag√©rial.", "8h 45min", "Interm√©diaire", 68000, "https://www.youtube.com/embed/J49_xa-2Vz4", "https://i.postimg.cc/prM8gJzG/course-agile.jpg", "0", "1200", "Estimer des t√¢ches complexes; Animer des r√©unions efficaces; G√©rer la dette technique dans un sprint.", "Exp√©rience en gestion de projet ou en d√©veloppement.", "Le pont entre la technique et la strat√©gie produit.", "Professionnels seniors, Tech Leads, Team Leads.", "H√©l√®ne Martin", "Engineering Manager @ AgileSoft", "J'ai transform√© des √©quipes en machines de livraison agiles. Voici ma m√©thode.", "4.8", "115 Avis"],
      ["C-010", "Tests E2E avec Cypress : De Z√©ro √† H√©ros", "Arr√™tez les tests manuels r√©p√©titifs. Automatisez vos tests de bout en bout et livrez avec confiance.", "10h 10min", "D√©butant", 58000, "https://www.youtube.com/embed/u8vMu9MSr9E", "https://i.postimg.cc/L6N6pB3x/course-testing.jpg", "0", "1200", "√âcrire des tests Cypress fiables; Interagir avec une application web; Int√©grer les tests dans une CI/CD.", "Bases de JavaScript.", "La comp√©tence qui vous fera passer de '√ßa marche sur ma machine' √† '√ßa marche en production'.", "D√©veloppeurs Frontend, Ing√©nieurs QA.", "Kenji Tanaka", "QA Automation Lead", "Mes tests ont √©vit√© des millions de dollars de bugs. Je vous montre comment √©crire les v√¥tres.", "4.9", "190 Avis"]
    ];

    // Modules
    const modulesData = [
      ["C-001", "M-001-1", "Fondations et Anti-Patterns", "Comprendre les erreurs communes qui m√®nent √† l'√©chec.", "1h 05min", 1],
      ["C-001", "M-001-2", "Communication Inter-Services", "Choisir la bonne strat√©gie de communication (synchrone vs asynchrone).", "55min", 2],
      ["C-002", "M-002-1", "Les Hooks en Profondeur", "Au-del√† de useState et useEffect.", "2h 00min", 1],
      ["C-002", "M-002-2", "Strat√©gies de State Management", "Zustand, Jotai et les alternatives √† Redux.", "3h 15min", 2],
      ["C-003", "M-003-1", "Les Bases de GitLab CI", "Cr√©er son premier pipeline.", "1h 30min", 1],
      ["C-003", "M-003-2", "D√©ploiement sur Kubernetes", "De l'image Docker au pod.", "2h 30min", 2]
    ];

    // Chapitres
    const chapitresData = [
      ["M-001-1", "CH-001-1-1", "Introduction : Pourquoi les microservices √©chouent (Freemium)", "https://www.youtube.com/embed/Plq333-4k6E", "20min", "PDF: Checklist des pr√©requis", 1],
      ["M-001-1", "CH-001-1-2", "Le pi√®ge du Monolithe Distribu√©", "https://www.youtube.com/embed/Plq333-4k6E", "45min", "Code: Exemple √† ne pas suivre", 2],
      ["M-001-2", "CH-001-2-1", "REST vs gRPC vs Message Queues", "https://www.youtube.com/embed/Plq333-4k6E", "55min", "Quiz d'√©valuation", 3],
      ["M-002-1", "CH-002-1-1", "Cr√©er son premier Hook personnalis√©", "https://www.youtube.com/embed/N3AkSS5hXMA", "30min", "Code source", 1],
      ["M-002-1", "CH-002-1-2", "useReducer pour les √©tats complexes", "https://www.youtube.com/embed/N3AkSS5hXMA", "45min", "Code source", 2],
      ["M-002-2", "CH-002-2-1", "G√©rer l'√©tat global avec Zustand", "https://www.youtube.com/embed/N3AkSS5hXMA", "1h 15min", "Quiz d'√©valuation", 3],
      ["M-003-1", "CH-003-1-1", "Anatomie d'un fichier .gitlab-ci.yml", "https://www.youtube.com/embed/rG3_c42X_gQ", "25min", "Fichier de configuration type", 1],
      ["M-003-2", "CH-003-2-1", "√âcrire un Dockerfile optimis√© pour la production", "https://www.youtube.com/embed/rG3_c42X_gQ", "40min", "Dockerfile", 2]
    ];

    // Quiz
    const quizData = [
      ["CH-001-2-1", "Quel est le principal inconv√©nient d'une communication synchrone (REST) ?", "Couplage temporel fort", "Performance", "S√©curit√©", "Complexit√© du code", "Couplage temporel fort"],
      ["CH-002-2-1", "Quel est l'avantage principal de Zustand sur Redux ?", "Moins de boilerplate", "Plus performant", "Meilleur pour TypeScript", "Plus de fonctionnalit√©s", "Moins de boilerplate"],
      ["CH-003-2-1", "Quelle instruction Docker est utilis√©e pour copier des fichiers dans l'image ?", "COPY", "ADD", "MOVE", "INCLUDE", "COPY"]
    ];

    // --- Insertion des donn√©es ---

    if (coursSheet && coursData.length > 0) {
      coursSheet.getRange(coursSheet.getLastRow() + 1, 1, coursData.length, coursData[0].length).setValues(coursData);
    }
    if (modulesSheet && modulesData.length > 0) {
      modulesSheet.getRange(modulesSheet.getLastRow() + 1, 1, modulesData.length, modulesData[0].length).setValues(modulesData);
    }
    if (chapitresSheet && chapitresData.length > 0) {
      chapitresSheet.getRange(chapitresSheet.getLastRow() + 1, 1, chapitresData.length, chapitresData[0].length).setValues(chapitresData);
    }
    if (quizChapitresSheet && quizData.length > 0) {
      quizChapitresSheet.getRange(quizChapitresSheet.getLastRow() + 1, 1, quizData.length, quizData[0].length).setValues(quizData);
    }
    if (quizModulesSheet) {
      // Pas de donn√©es de quiz de module pour l'instant
    }

    ui.alert("Donn√©es de d√©monstration ajout√©es avec succ√®s !");

  } catch (e) {
    ui.alert("Erreur lors de l'ajout des donn√©es de d√©mo : " + e.message);
  }
}

/**
 * NOUVEAU: Supprime toutes les donn√©es (sauf les en-t√™tes) des feuilles de cours.
 */
function clearDemoData() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();

  const response = ui.alert(
    'Confirmation',
    'Voulez-vous vraiment supprimer toutes les donn√©es des feuilles de cours (les en-t√™tes seront conserv√©s) ? Cette action est irr√©versible.',
    ui.ButtonSet.YES_NO
  );

  if (response !== ui.Button.YES) {
    ui.alert('Op√©ration annul√©e.');
    return;
  }

  try {
    const allSheets = ss.getSheets();
    let clearedCount = 0;

    allSheets.forEach(sheet => {
      const sheetName = sheet.getName();
      // Cible uniquement les feuilles qui suivent la structure des cours
      if (sheetName.startsWith('Cours_') || sheetName.startsWith('Modules_') || sheetName.startsWith('Chapitres_') || sheetName.startsWith('Quiz_')) {
        const lastRow = sheet.getLastRow();
        if (lastRow > 1) {
          sheet.getRange(2, 1, lastRow - 1, sheet.getLastColumn()).clearContent();
          clearedCount++;
        }
      }
    });

    ui.alert(`${clearedCount} feuille(s) ont √©t√© nettoy√©es.`);
    invalidateGlobalCache(); // Invalider le cache apr√®s suppression

  } catch (e) {
    ui.alert("Erreur lors de la suppression des donn√©es : " + e.message);
  }
}

// --- NOUVEAU: Fonctions de gestion de contenu via le menu ---

/**
 * Affiche une bo√Æte de dialogue pour ajouter un nouveau cours.
 */
function addCourse() {
  const ui = SpreadsheetApp.getUi();
  const categoryName = getCategoryName();
  const coursSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(`Cours_${categoryName}`);

  if (!coursSheet) {
    ui.alert(`La feuille "Cours_${categoryName}" est introuvable.`);
    return;
  }

  const result = ui.prompt(
    'Ajouter un nouveau cours',
    'Entrez le nom du nouveau cours :',
    ui.ButtonSet.OK_CANCEL
  );

  if (result.getSelectedButton() == ui.Button.OK && result.getResponseText()) {
    const courseName = result.getResponseText().trim();
    const newId = `C-${new Date().getTime().toString().slice(-6)}`;
    
    // Ajoute une nouvelle ligne avec l'ID et le nom, les autres champs sont √† remplir manuellement.
    coursSheet.appendRow([newId, courseName]);
    ui.alert(`Cours "${courseName}" ajout√© avec l'ID ${newId}. Veuillez compl√©ter les autres informations dans la ligne.`);
  }
}

/**
 * Affiche une bo√Æte de dialogue pour ajouter un nouveau module √† un cours.
 */
function addModule() {
  const ui = SpreadsheetApp.getUi();
  const categoryName = getCategoryName();
  const modulesSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(`Modules_${categoryName}`);

  if (!modulesSheet) {
    ui.alert(`La feuille "Modules_${categoryName}" est introuvable.`);
    return;
  }

  let courseId = ui.prompt('ID du Cours', '√Ä quel ID de cours ce module appartient-il ? (ex: C-001)', ui.ButtonSet.OK_CANCEL);
  if (courseId.getSelectedButton() !== ui.Button.OK || !courseId.getResponseText()) return;
  courseId = courseId.getResponseText().trim();

  let moduleName = ui.prompt('Nom du Module', 'Entrez le nom du nouveau module :', ui.ButtonSet.OK_CANCEL);
  if (moduleName.getSelectedButton() !== ui.Button.OK || !moduleName.getResponseText()) return;
  moduleName = moduleName.getResponseText().trim();

  let moduleDesc = ui.prompt('Description du Module', 'Entrez une courte description pour ce module :', ui.ButtonSet.OK_CANCEL);
  moduleDesc = moduleDesc.getResponseText().trim();

  // Calculer le prochain num√©ro d'ordre pour ce cours
  const allModules = sheetToJSON(modulesSheet);
  const modulesForCourse = allModules.filter(m => m.ID_Cours == courseId);
  const nextOrder = modulesForCourse.length + 1;

  const newId = `M-${courseId.split('-')[1]}-${nextOrder}`;

  modulesSheet.appendRow([courseId, newId, moduleName, moduleDesc, "", nextOrder]);
  ui.alert(`Module "${moduleName}" (Ordre: ${nextOrder}) ajout√© au cours ${courseId}.`);
}

/**
 * Affiche une bo√Æte de dialogue pour ajouter un nouveau chapitre √† un module.
 */
function addChapter() {
  const ui = SpreadsheetApp.getUi();
  const categoryName = getCategoryName();
  const chapitresSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(`Chapitres_${categoryName}`);

  if (!chapitresSheet) {
    ui.alert(`La feuille "Chapitres_${categoryName}" est introuvable.`);
    return;
  }

  let moduleId = ui.prompt('ID du Module', '√Ä quel ID de module ce chapitre appartient-il ? (ex: M-001-1)', ui.ButtonSet.OK_CANCEL);
  if (moduleId.getSelectedButton() !== ui.Button.OK || !moduleId.getResponseText()) return;
  moduleId = moduleId.getResponseText().trim();

  let chapterName = ui.prompt('Nom du Chapitre', 'Entrez le nom du nouveau chapitre :', ui.ButtonSet.OK_CANCEL);
  if (chapterName.getSelectedButton() !== ui.Button.OK || !chapterName.getResponseText()) return;
  chapterName = chapterName.getResponseText().trim();

  let duration = ui.prompt('Dur√©e', 'Entrez la dur√©e du chapitre (ex: 7min, 1h15) :', ui.ButtonSet.OK_CANCEL);
  if (duration.getSelectedButton() !== ui.Button.OK || !duration.getResponseText()) return;
  duration = duration.getResponseText().trim();

  // Calculer le prochain num√©ro d'ordre pour ce module
  const allChapters = sheetToJSON(chapitresSheet);
  const chaptersForModule = allChapters.filter(c => c.ID_Module == moduleId);
  const nextOrder = chaptersForModule.length + 1;

  const newId = `CH-${moduleId.split('-')[1]}-${moduleId.split('-')[2]}-${nextOrder}`;

  chapitresSheet.appendRow([moduleId, newId, chapterName, "", duration, "", nextOrder]);
  ui.alert(`Chapitre "${chapterName}" (Ordre: ${nextOrder}) ajout√© au module ${moduleId}.`);
}

/**
 * NOUVEAU: Ajoute un cours √† partir d'une requ√™te POST (ex: tableau de bord).
 */
function addCourseFromDashboard(data, origin) {
  try {
    const categoryName = getCategoryName();
    const coursSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(`Cours_${categoryName}`);
    if (!coursSheet) {
      throw new Error(`Feuille "Cours_${categoryName}" introuvable.`);
    }

    const newId = `C-${new Date().getTime().toString().slice(-6)}`;
    
    // Pr√©parer la ligne avec les donn√©es fournies, en respectant l'ordre des colonnes
    // ["ID_Cours", "Nom_Cours", "R√©sum√©", "Dur√©e_Totale", "Niveau", "Prix", "URL_Vid√©o_Intro", "Image_Couverture", "Freemium_Start", "Freemium_End", "Objectifs", "Pr√©requis", "Avantage_Senior", "Public_Cible", "Formateur_Nom", "Formateur_Titre", "Formateur_Bio", "Note_Moyenne", "Avis"]
    const newRow = [
      newId,                // ID_Cours
      data.nom,               // Nom_Cours
      data.resume,            // R√©sum√©
      data.duree,             // Dur√©e_Totale
      data.niveau,            // Niveau
      data.prix,              // Prix
      data.videoIntro,        // URL_Vid√©o_Intro
      data.imageCouverture,   // Image_Couverture
      "0",                    // Freemium_Start (valeur par d√©faut)
      "1200",                 // Freemium_End (valeur par d√©faut, 20min)
      data.objectifs,         // Objectifs
      data.prerequis,         // Pr√©requis
      data.avantageSenior || `Le savoir-faire d'un expert.`, // Avantage_Senior (avec une valeur par d√©faut)
      data.publicCible,       // Public_Cible
      data.formateurNom,      // Formateur_Nom
      data.formateurTitre,    // Formateur_Titre
      data.formateurBio,      // Formateur_Bio
      "0",                    // Note_Moyenne (initiale)
      "0 Avis"                // Avis (initial)
    ];

    coursSheet.appendRow(newRow);
    invalidateGlobalCache(); // Important pour que le nouveau cours apparaisse
    return createJsonResponse({ success: true, id: newId, message: "Cours ajout√© avec succ√®s." }, origin);
  } catch (e) {
    return createJsonResponse({ success: false, error: e.message }, origin);
  }
}
