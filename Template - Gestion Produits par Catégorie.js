/**
 * @file Template - Gestion de Cours par Cat√©gorie
 * @description Script Google Apps pour lire et assembler des donn√©es de cours structur√©es
 * ¬† ¬† ¬† ¬† ¬† ¬† ¬†√† partir de plusieurs feuilles dans un Google Sheet.
 * @version 1.0.2 (Correction TypeError setHeader et getCategoryName)
 * @author Gemini Code Assist
 */

// --- CONFIGURATION ---

// URL du script central qui g√®re le catalogue. Ce script l'appellera pour invalider le cache.
const CENTRAL_ADMIN_API_URL = "https://script.google.com/macros/s/AKfycbxh1olxmG44KS1Gq_RA6zviC6M1xQkIUYr_0KeAS4qNILwypNLXYNQHcqFwiP9Rg5tWFw/exec";
const ALLOWED_ORIGIN = 'https://junior-senior-gaps-killer.vercel.app'; // Domaine autoris√© pour CORS

// --- GESTIONNAIRES D'√âV√âNEMENTS (TRIGGERS) ---

/**
 * Cr√©e un menu personnalis√© √† l'ouverture de la feuille de calcul.
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('Gestion des Cours')
      .addItem('üöÄ Initialiser les feuilles de cours', 'setupCourseSheets')
      .addSeparator()
      .addItem('‚ûï Ajouter un Cours', 'addCourse')
      .addItem('‚ûï Ajouter un Module', 'addModule')
      .addItem('‚ûï Ajouter un Chapitre', 'addChapter')
      .addSeparator()
      .addItem('üóëÔ∏è Supprimer les donn√©es de d√©mo', 'clearDemoData')
      .addSeparator()
      .addItem('Forcer la mise √† jour du cache global', 'invalidateGlobalCache')
      .addToUi();
}

/**
 * Se d√©clenche automatiquement √† chaque modification de la feuille.
 * Invalide le cache global pour que le front-end r√©cup√®re les nouvelles donn√©es.
 */
function onEdit(e) {
  Logger.log("Modification d√©tect√©e. Invalidation du cache global demand√©e.");
  invalidateGlobalCache();
}

// --- POINTS D'ENTR√âE DE L'API WEB (doGet, doPost, doOptions) ---

/**
 * G√®re les requ√™tes OPTIONS pour le pr√©-vol CORS. Essentiel pour les requ√™tes POST.
 */
function doOptions(e) {
  // R√©pond aux requ√™tes de pr√©-v√©rification CORS
  return ContentService.createTextOutput()
    .setHeader('Access-Control-Allow-Origin', ALLOWED_ORIGIN)
    .setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS')
    .setHeader('Access-Control-Allow-Headers', 'Content-Type');
}

// --- CONFIGURATION ---
const CENTRAL_SHEET_ID = "1xcW_lPim1AvD-RWDD0FtpAMYSrWq-FSv9XGa1ys2Xv4"; // IMPORTANT: ID de la feuille centrale
const DEFAULT_IMAGE_URL = "https://i.postimg.cc/X3zY8dfN/cree-oi-un-logo-fiuturiste-de-ABMedu-un-eplatforme-de-ellernnig-la-couleur-est-le-degrader-bleu-mari.jpg";


/**
 * Point d'entr√©e pour les requ√™tes GET.
 * L'action principale est `getProducts` (conserv√© pour la compatibilit√©) qui renvoie les fiches de cours compl√®tes.
 */
function doGet(e) {
  const origin = (e && e.headers && (e.headers.Origin || e.headers.origin)) || null;
  try {
    const action = e.parameter.action;

    if (action === 'getProducts') {
      const categoryName = getCategoryName();
      const fichesCours = getAllCoursData(categoryName);
      const responseData = { success: true, data: fichesCours };
      return createJsonResponse(responseData, origin);
    }

    return createJsonResponse({ success: false, error: "Action GET non reconnue." }, origin);
  } catch (error) {
    Logger.log("ERREUR dans doGet : " + error.toString());
    return createJsonResponse({ success: false, error: error.message }, origin);
  }
}

/**
 * Point d'entr√©e pour les requ√™tes POST. Actuellement non utilis√©, mais pr√™t pour de futures actions.
 */
function doPost(e) {
  const origin = (e && e.headers && (e.headers.Origin || e.headers.origin)) || null;
  try {
    const request = JSON.parse(e.postData.contents);
    const { action, data } = request;

    switch (action) {
      case 'addCourseFromDashboard':
        return addCourseFromDashboard(data, origin);
      default:
        return createJsonResponse({ success: false, error: `Action POST non reconnue: ${action}` }, origin);
    }

  } catch (error) {
    Logger.log("ERREUR dans doPost : " + error.toString());
    return createJsonResponse({ success: false, error: error.message }, origin);
  }
}

// --- LOGIQUE M√âTIER : ASSEMBLAGE DES DONN√âES DE COURS ---

/**
 * Fonction principale qui orchestre la r√©cup√©ration et l'assemblage de toutes les donn√©es de cours.
 * @param {string} categoryName - Le nom de la cat√©gorie (ex: "Backend").
 * @returns {Array<Object>} Un tableau de fiches de cours compl√®tes.
 */
function getAllCoursData(categoryName) {
  Logger.log(`D√©but de l'assemblage pour la cat√©gorie : ${categoryName}`);

  // 1. Lire toutes les donn√©es de toutes les feuilles en une seule fois pour l'efficacit√©.
  const allData = {
    cours: sheetToJSON(SpreadsheetApp.getActiveSpreadsheet().getSheetByName(`Cours_${categoryName}`)),
    modules: sheetToJSON(SpreadsheetApp.getActiveSpreadsheet().getSheetByName(`Modules_${categoryName}`)),
    chapitres: sheetToJSON(SpreadsheetApp.getActiveSpreadsheet().getSheetByName(`Chapitres_${categoryName}`)),
    quizChapitres: sheetToJSON(SpreadsheetApp.getActiveSpreadsheet().getSheetByName(`Quiz_Chapitres_${categoryName}`)),
    quizModules: sheetToJSON(SpreadsheetApp.getActiveSpreadsheet().getSheetByName(`Quiz_Modules_${categoryName}`))
  };

  Logger.log(`Donn√©es brutes lues : ${allData.cours.length} cours, ${allData.modules.length} modules, ${allData.chapitres.length} chapitres.`);

  // 2. Pour chaque cours, g√©n√©rer sa fiche compl√®te.
  const fichesCompletes = allData.cours.map(cours => generateFicheCours(cours.ID_Cours, allData));

  Logger.log("Toutes les fiches de cours ont √©t√© g√©n√©r√©es.");
  return fichesCompletes.filter(f => f !== null);
}

/**
 * G√©n√®re une fiche de cours compl√®te et structur√©e pour un ID de cours donn√©.
 * @param {string} idCours - L'ID du cours √† assembler.
 * @param {Object} allData - Un objet contenant les donn√©es de toutes les feuilles.
 * @returns {Object} La fiche de cours compl√®te.
 */
function generateFicheCours(idCours, allData) {
  Logger.log(`G√©n√©ration de la fiche pour le cours ID: ${idCours}`);

  // 1. Trouver le cours de base.
  const coursBase = allData.cours.find(c => c.ID_Cours == idCours);
  if (!coursBase) {
    Logger.log(`Cours ID: ${idCours} non trouv√©.`);
    return null;
  }

  // 2. R√©cup√©rer les modules pour ce cours.
  const modulesDuCours = getModulesByCours(idCours, allData.modules);

  // 3. Pour chaque module, r√©cup√©rer ses chapitres et ses quiz.
  modulesDuCours.forEach(module => {
    // R√©cup√©rer les chapitres du module
    const chapitresDuModule = getChapitresByModule(module.ID_Module, allData.chapitres);

    // Pour chaque chapitre, r√©cup√©rer ses quiz
    chapitresDuModule.forEach(chapitre => {
      chapitre.quiz = getQuizByChapitre(chapitre.ID_Chapitre, allData.quizChapitres);
    });

    module.chapitres = chapitresDuModule;
    module.quiz = getQuizByModule(module.ID_Module, allData.quizModules);
  });

  // 4. Assembler la fiche finale.
  const ficheFinale = {
    ...coursBase,
    modules: modulesDuCours
  };

  logFiche(ficheFinale);
  return ficheFinale;
}

// --- FONCTIONS DE R√âCUP√âRATION DE DONN√âES (FILTRAGE) ---

function getModulesByCours(idCours, allModules) {
  return allModules.filter(m => m.ID_Cours == idCours).sort((a, b) => a.Ordre_Module - b.Ordre_Module);
}

function getChapitresByModule(idModule, allChapitres) {
  return allChapitres.filter(c => c.ID_Module == idModule).sort((a, b) => a.Ordre_Chapitre - b.Ordre_Chapitre);
}

function getQuizByChapitre(idChapitre, allQuiz) {
  return allQuiz.filter(q => q.ID_Chapitre == idChapitre);
}

function getQuizByModule(idModule, allQuiz) {
  return allQuiz.filter(q => q.ID_Module == idModule);
}

// --- FONCTIONS UTILITAIRES ---

/**
 * Renvoie uniquement le nom de la cat√©gorie (ex: "Backend") √† partir du nom de la feuille (ex: "Cours_Backend").
 */
function getCategoryName() {
  const sheetName = SpreadsheetApp.getActiveSpreadsheet().getSheets()[0].getName();
  // On retire le pr√©fixe "Cours_" pour obtenir uniquement le nom de la cat√©gorie
  return sheetName.replace('Cours_', '');
}

function initialiserAvecDonn√©esD√©mos() {
  const categoryName = getCategoryName();
  seedDefaultCourseData(categoryName);
  SpreadsheetApp.getUi().alert(`Les feuilles ont √©t√© remplies avec des donn√©es d'exemple pour la cat√©gorie "${categoryName}".`);
}
/**
 * Utilitaire pour invalider le cache global en appelant le script central.
 */
function invalidateGlobalCache() {
  // Appelle le script central pour lui dire de mettre √† jour la version du cache.
  UrlFetchApp.fetch(CENTRAL_ADMIN_API_URL + "?action=invalidateCache", {
    method: 'get', muteHttpExceptions: true
  });
  Logger.log("Demande d'invalidation du cache global envoy√©e.");
}

/**
 * Cr√©e une r√©ponse JSON standard.
 * CORRECTION: Suppression des appels √† setHeader qui causaient l'erreur TypeError.
 */
function createJsonResponse(data, origin) {
  const output = ContentService.createTextOutput(JSON.stringify(data));
  output.setMimeType(ContentService.MimeType.JSON);
  // La gestion CORS pour GET est assur√©e par la configuration du d√©ploiement
  // et la fonction doOptions pour le pre-flight.
  return output;
}

/**
 * Utilitaire pour convertir une feuille en JSON.
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet - La feuille √† convertir.
 * @returns {Array<Object>} Un tableau d'objets repr√©sentant les lignes.
 */
function sheetToJSON(sheet) {
  if (!sheet || sheet.getLastRow() < 2) return [];
  const data = sheet.getRange(1, 1, sheet.getLastRow(), sheet.getLastColumn()).getValues();
  const headers = data.shift();
  return data.map(row => {
    const obj = {};
    headers.forEach((header, index) => {
      if (header) {
        obj[header] = row[index];
      }
    });
    return obj;
  });
}

/**
 * Affiche une version simplifi√©e de la fiche de cours dans les journaux d'ex√©cution.
 * @param {Object} fiche - La fiche de cours compl√®te.
 */
function logFiche(fiche) {
  Logger.log(`--- FICHE COURS : ${fiche.Nom_Cours} (ID: ${fiche.ID_Cours}) ---`);
  Logger.log(` ¬†Modules: ${fiche.modules.length}`);
  fiche.modules.forEach(m => {
    Logger.log(` ¬† ¬†- Module: ${m.Nom_Module} (Chapitres: ${m.chapitres.length}, Quiz: ${m.quiz.length})`);
  });
  Logger.log('----------------------------------------------------');
}

/**
 * Initialise toutes les feuilles n√©cessaires pour la gestion des cours d'une cat√©gorie.
 */
function setupCourseSheets() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();

  const response = ui.prompt('Configuration', 'Entrez le nom de la cat√©gorie (ex: Backend, DevOps):', ui.ButtonSet.OK_CANCEL);
  if (response.getSelectedButton() !== ui.Button.OK || !response.getResponseText()) {
    ui.alert('Op√©ration annul√©e.');
    return;
  }
  const categoryName = response.getResponseText().trim();
  ss.rename(categoryName); // Renomme la feuille de calcul elle-m√™me

  const sheetStructures = {
    [`Cours_${categoryName}`]: ["ID_Cours", "Nom_Cours", "R√©sum√©", "Dur√©e_Totale", "Niveau", "Prix", "URL_Vid√©o_Intro", "Image_Couverture", "Freemium_Start", "Freemium_End", "Objectifs", "Pr√©requis", "Avantage_Senior", "Public_Cible", "Formateur_Nom", "Formateur_Titre", "Formateur_Bio", "Note_Moyenne", "Avis"],
    [`Modules_${categoryName}`]: ["ID_Cours", "ID_Module", "Nom_Module", "Description_Module", "Dur√©e_Module", "Ordre_Module"],
    [`Chapitres_${categoryName}`]: ["ID_Module", "ID_Chapitre", "Nom_Chapitre", "URL_Vid√©o_Chapitre", "Dur√©e", "Ressource", "Ordre_Chapitre"],
    [`Quiz_Chapitres_${categoryName}`]: ["ID_Chapitre", "Question", "R√©ponse_1", "R√©ponse_2", "R√©ponse_3", "R√©ponse_4", "Bonne_R√©ponse"],
    [`Quiz_Modules_${categoryName}`]: ["ID_Module", "Question", "R√©ponse_1", "R√©ponse_2", "R√©ponse_3", "R√©ponse_4", "Bonne_R√©ponse"]
  };

  // Supprimer les feuilles existantes sauf la premi√®re
  const allSheets = ss.getSheets();
  for (let i = allSheets.length - 1; i > 0; i--) {
    ss.deleteSheet(allSheets[i]);
  }

  let firstSheet = true;
  for (const sheetName in sheetStructures) {
    const headers = sheetStructures[sheetName];
    let sheet;
    if (firstSheet) {
      sheet = ss.getSheets()[0];
      sheet.setName(sheetName);
      sheet.clear();
      firstSheet = false;
    } else {
      sheet = ss.insertSheet(sheetName);
    }
    sheet.appendRow(headers);
    sheet.setFrozenRows(1);
    sheet.getRange(1, 1, 1, headers.length).setFontWeight("bold");
  }

  // CORRECTION: Appeler la fonction pour ajouter les donn√©es de d√©mo juste apr√®s la cr√©ation.
  seedDefaultCourseData(categoryName);
  ui.alert(`Structure de cours pour la cat√©gorie "${categoryName}" initialis√©e et remplie avec des donn√©es de d√©mo !`);
}

/**
 * NOUVEAU: Ajoute des donn√©es d'exemple dans les feuilles fra√Æchement cr√©√©es.
 * @param {string} categoryName - Le nom de la cat√©gorie pour laquelle ajouter les donn√©es.
 */
function seedDefaultCourseData(categoryName) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();

  try {
    // R√©cup√©ration des feuilles
    const coursSheet = ss.getSheetByName(`Cours_${categoryName}`);
    const modulesSheet = ss.getSheetByName(`Modules_${categoryName}`);
    const chapitresSheet = ss.getSheetByName(`Chapitres_${categoryName}`);
    const quizChapitresSheet = ss.getSheetByName(`Quiz_Chapitres_${categoryName}`);
    const quizModulesSheet = ss.getSheetByName(`Quiz_Modules_${categoryName}`);

    // --- Donn√©es d'exemple ---
    // NOUVEAU: Donn√©es de cours ax√©es sur l'entrepreneuriat

    // Cours
    const coursData = [
      ["C-001", "Gestion du Temps pour Entrepreneurs", "Apprenez √† ma√Ætriser votre temps pour maximiser votre productivit√© et atteindre vos objectifs plus rapidement.", "4h 30min", "D√©butant", 45000, "https://www.youtube.com/embed/example1", "https://images.pexels.com/photos/7688336/pexels-photo-7688336.jpeg?auto=compress&cs=tinysrgb&w=600", "0", "1200", "Prioriser les t√¢ches; √âviter la procrastination; Utiliser des outils de productivit√©.", "Aucun pr√©requis.", "Doublez votre productivit√© en 30 jours.", "√âtudiants, freelances, et jeunes entrepreneurs.", "A√Øcha Diallo", "Coach en Productivit√©", "Le temps est votre ressource la plus pr√©cieuse. Je vous apprends √† l'investir, pas √† le d√©penser.", "4.8", "150 Avis"],
      ["C-002", "Le Mindset de la R√©ussite : Penser comme un Gagnant", "D√©veloppez la force mentale, la r√©silience et la confiance en soi n√©cessaires pour surmonter tous les obstacles.", "6h 00min", "Tous niveaux", 50000, "https://www.youtube.com/embed/RcgyutgrC-4", "https://images.pexels.com/photos/3184418/pexels-photo-3184418.jpeg?auto=compress&cs=tinysrgb&w=600", "0", "1200", "D√©velopper un √©tat d'esprit de croissance; G√©rer le stress et la pression; Se fixer des objectifs ambitieux.", "Aucun pr√©requis.", "Votre succ√®s commence dans votre t√™te.", "Toute personne souhaitant atteindre son plein potentiel.", "Moussa Traor√©", "Consultant en Performance", "J'ai coach√© des athl√®tes et des PDG. Leur secret commun ? Un mental d'acier. Je vous livre leurs techniques.", "4.9", "250 Avis"],
      ["C-003", "L'Art de la Vente : Se Vendre et Vendre ses Id√©es", "Que vous vendiez un produit ou vous-m√™me en entretien, apprenez les techniques des meilleurs pour convaincre.", "5h 15min", "Interm√©diaire", 55000, "https://www.youtube.com/embed/example3", "https://images.pexels.com/photos/3184465/pexels-photo-3184465.jpeg?auto=compress&cs=tinysrgb&w=600", "0", "1200", "Ma√Ætriser le pitch; Comprendre la psychologie de l'acheteur; N√©gocier efficacement.", "Aucun pr√©requis.", "Apprenez √† vendre n'importe quoi √† n'importe qui.", "Commerciaux, entrepreneurs, chercheurs d'emploi.", "Jean Dupont", "Directeur Commercial", "La vente n'est pas un don, c'est une science. Je vous en donne la formule.", "4.7", "180 Avis"],
      ["C-004", "Les Fondamentaux de l'Entrepreneuriat : De l'Id√©e au Business", "Le guide √©tape par √©tape pour transformer votre id√©e en une entreprise viable, m√™me en √©tant √©tudiant.", "8h 00min", "D√©butant", 65000, "https://www.youtube.com/embed/UTyO2f51jM0", "https://images.pexels.com/photos/3183150/pexels-photo-3183150.jpeg?auto=compress&cs=tinysrgb&w=600", "0", "1200", "Valider son id√©e de march√©; Cr√©er un business model simple; Trouver ses premiers clients.", "Aucun pr√©requis.", "Lancez votre premier business en 90 jours.", "√âtudiants et porteurs de projet.", "Fatou N'diaye", "Serial Entrepreneure", "J'ai lanc√© 3 entreprises avant mes 30 ans. Ce cours est la feuille de route que j'aurais aim√© avoir.", "4.9", "320 Avis"],
      ["C-005", "N√©gocier comme un Pro : Obtenez Toujours Plus", "Apprenez les strat√©gies psychologiques et les tactiques pour sortir gagnant de toutes vos n√©gociations.", "3h 45min", "Interm√©diaire", 60000, "https://www.youtube.com/embed/example5", "https://images.pexels.com/photos/1181533/pexels-photo-1181533.jpeg?auto=compress&cs=tinysrgb&w=600", "0", "1200", "Pr√©parer une n√©gociation; Comprendre le langage corporel; G√©rer les situations de blocage.", "Aucun pr√©requis.", "Ne laissez plus jamais d'argent sur la table.", "Tous ceux qui veulent mieux n√©gocier leur salaire, leurs contrats, etc.", "Carlos Gomez", "Ancien N√©gociateur du GIGN", "La n√©gociation est un jeu d'√©checs. Je vous apprends √† avoir toujours trois coups d'avance.", "4.8", "195 Avis"],
      ["C-006", "Cr√©er de la Valeur : Le Secret des Business Durables", "Arr√™tez de penser 'argent'. Commencez √† penser 'valeur' et l'argent suivra. D√©couvrez comment cr√©er des offres irr√©sistibles.", "5h 00min", "Expert", 75000, "https://www.youtube.com/embed/videoseries?list=PLjWD3w21s25Y-6fNY4H6X6z2gA4y3a-tJ", "https://images.pexels.com/photos/3153201/pexels-photo-3153201.jpeg?auto=compress&cs=tinysrgb&w=600", "0", "1200", "Identifier un probl√®me de niche; Construire une proposition de valeur unique; Cr√©er une communaut√© engag√©e.", "Avoir une id√©e de business.", "B√¢tissez une marque, pas juste un produit.", "Entrepreneurs et chefs de produit.", "H√©l√®ne Martin", "Strat√®ge en Marque", "Les entreprises qui durent sont celles qui apportent une valeur immense. Je vous montre comment.", "4.9", "140 Avis"],
      ["C-007", "Marketing Digital pour Startups", "D√©couvrez comment vous faire conna√Ætre avec un petit budget gr√¢ce aux strat√©gies de marketing digital les plus efficaces.", "7h 30min", "D√©butant", 60000, "https://www.youtube.com/embed/c3g-c1g_p-A", "https://images.pexels.com/photos/6476587/pexels-photo-6476587.jpeg?auto=compress&cs=tinysrgb&w=600", "0", "1200", "Cr√©er du contenu viral; Ma√Ætriser la publicit√© Facebook; Optimiser son SEO.", "Aucun pr√©requis.", "Attirez vos 1000 premiers visiteurs.", "Porteurs de projet, freelances.", "Sofia Chen", "Growth Marketer", "Le marketing n'est pas une question de budget, mais de cr√©ativit√©. Je vous donne mes meilleures recettes.", "4.8", "210 Avis"],
      ["C-008", "Finance pour Entrepreneurs", "Ne soyez plus intimid√© par les chiffres. Apprenez √† lire un bilan, cr√©er un pr√©visionnel et piloter votre entreprise par la data.", "6h 45min", "D√©butant", 70000, "https://www.youtube.com/embed/s94-t-iW_bA", "https://images.pexels.com/photos/7567568/pexels-photo-7567568.jpeg?auto=compress&cs=tinysrgb&w=600", "0", "1200", "Comprendre le compte de r√©sultat; Calculer son seuil de rentabilit√©; G√©rer sa tr√©sorerie.", "Aucun pr√©requis.", "Prenez des d√©cisions bas√©es sur des chiffres, pas des intuitions.", "Tout entrepreneur qui veut ma√Ætriser ses finances.", "Omar Benali", "Directeur Financier √† temps partag√©", "La finance est le langage du business. Je vous apprends √† le parler couramment.", "4.7", "115 Avis"],
      ["C-009", "Leadership et Management d'√âquipe", "Passez de 'solopreneur' √† leader. Apprenez √† recruter, motiver et g√©rer une √©quipe performante.", "5h 00min", "Interm√©diaire", 68000, "https://www.youtube.com/embed/Z3sa_K3-5sA", "https://images.pexels.com/photos/3184360/pexels-photo-3184360.jpeg?auto=compress&cs=tinysrgb&w=600", "0", "1200", "Mener un entretien d'embauche; Donner du feedback constructif; G√©rer les conflits.", "Avoir une premi√®re exp√©rience de gestion.", "B√¢tissez une culture d'entreprise forte.", "Managers, chefs de projet, fondateurs de startup.", "Kenji Tanaka", "Engineering Manager", "Une bonne √©quipe peut accomplir l'impossible. Je vous montre comment en construire une.", "4.9", "160 Avis"]
    ];

    // Modules
    const modulesData = [
      ["C-001", "M-001-1", "Prioriser l'Essentiel", "Apprenez √† distinguer l'urgent de l'important pour vous concentrer sur ce qui compte vraiment.", "1h 30min", 1],
      ["C-001", "M-001-2", "Outils et Habitudes de Productivit√©", "D√©couvrez les outils et les routines qui d√©cuplent votre efficacit√© au quotidien.", "2h 00min", 2],
      ["C-002", "M-002-1", "D√©velopper un √âtat d'Esprit de Croissance (Growth Mindset)", "Comprenez la diff√©rence entre un √©tat d'esprit fixe et un √©tat d'esprit de croissance, et comment cultiver le second.", "2h 30min", 1],
      ["C-002", "M-002-2", "G√©rer l'√âchec et la Pression", "Transformez l'√©chec en opportunit√© d'apprentissage et g√©rez le stress des grands enjeux.", "2h 30min", 2],
      ["C-003", "M-003-1", "Le Pitch Parfait", "Structurez un discours percutant pour convaincre en moins de 2 minutes.", "2h 00min", 1],
      ["C-004", "M-004-1", "De l'Id√©e au Business Model Canvas", "Formalisez votre id√©e et testez sa viabilit√© avec des outils simples et puissants.", "3h 00min", 1],
      ["C-007", "M-007-1", "Construire sa Pr√©sence en Ligne", "Les fondations indispensables pour exister sur internet.", "2h 30min", 1],
      ["C-007", "M-007-2", "Strat√©gies d'Acquisition Payantes", "Comment utiliser la publicit√© pour acc√©l√©rer sa croissance.", "3h 00min", 2],
      ["C-008", "M-008-1", "Les Documents Financiers Cl√©s", "Apprenez √† lire et comprendre les documents qui pilotent votre entreprise.", "3h 00min", 1],
      ["C-009", "M-009-1", "Recruter les Meilleurs Talents", "Les techniques pour attirer et s√©lectionner les profils qui feront la diff√©rence.", "2h 00min", 1]
    ];

    // Chapitres
    const chapitresData = [
      ["M-001-1", "CH-001-1-1", "La Matrice d'Eisenhower : Urgent vs Important", "https://www.youtube.com/embed/example1", "25min", "PDF: Matrice √† imprimer", 1],
      ["M-001-1", "CH-001-1-2", "La loi de Pareto (80/20) appliqu√©e √† vos t√¢ches", "https://www.youtube.com/embed/example1", "30min", "Exercice pratique", 2],
      ["M-001-2", "CH-001-2-1", "La m√©thode Pomodoro pour une concentration absolue", "https://www.youtube.com/embed/example1", "20min", "Quiz d'√©valuation", 3],
      ["M-002-1", "CH-002-1-1", "Introduction : Fixed vs Growth Mindset", "https://www.youtube.com/embed/RcgyutgrC-4", "30min", "Auto-√©valuation", 1],
      ["M-002-1", "CH-002-1-2", "Comment transformer les critiques en carburant", "https://www.youtube.com/embed/RcgyutgrC-4", "45min", "Mise en situation", 2],
      ["M-003-1", "CH-003-1-1", "Les 3 piliers d'un pitch inoubliable", "https://www.youtube.com/embed/example3", "40min", "Template de pitch", 1],
      ["M-004-1", "CH-004-1-1", "Valider son id√©e sans d√©penser un centime", "https://www.youtube.com/embed/UTyO2f51jM0", "50min", "Checklist de validation", 1],
      ["M-007-1", "CH-007-1-1", "D√©finir sa marque et son audience cible", "https://www.youtube.com/embed/c3g-c1g_p-A", "45min", "Template: Persona", 1],
      ["M-007-2", "CH-007-2-1", "Lancer sa premi√®re campagne Facebook Ads", "https://www.youtube.com/embed/c3g-c1g_p-A", "1h 15min", "Checklist de campagne", 2],
      ["M-008-1", "CH-008-1-1", "D√©mystifier le Compte de R√©sultat", "https://www.youtube.com/embed/s94-t-iW_bA", "1h 00min", "Exemple de P&L", 1],
      ["M-009-1", "CH-009-1-1", "R√©diger une offre d'emploi attractive", "https://www.youtube.com/embed/Z3sa_K3-5sA", "35min", "Mod√®le d'offre d'emploi", 1]
    ];

    // Quiz
    const quizData = [
      ["CH-001-2-1", "Quelle est la dur√©e recommand√©e pour un 'Pomodoro' ?", "25 minutes", "45 minutes", "1 heure", "15 minutes", "25 minutes"],
      ["CH-002-1-1", "Quelle affirmation correspond √† un 'Growth Mindset' ?", "L'√©chec est une opportunit√© d'apprendre", "Je suis n√© comme √ßa", "Je ne suis pas bon en maths", "C'est trop difficile pour moi", "L'√©chec est une opportunit√© d'apprendre"],
      ["CH-004-1-1", "Quelle est la premi√®re √©tape pour valider une id√©e ?", "Cr√©er un site web", "Parler √† des clients potentiels", "D√©poser un brevet", "Chercher des investisseurs", "Parler √† des clients potentiels"],
      ["CH-007-2-1", "Quel est l'objectif principal d'une campagne de 'retargeting' ?", "Toucher une nouvelle audience", "Remercier les clients existants", "Recibler les visiteurs qui n'ont pas achet√©", "Augmenter la notori√©t√© de la marque", "Recibler les visiteurs qui n'ont pas achet√©"],
      ["CH-008-1-1", "Que signifie l'acronyme 'EBITDA' ?", "Exc√©dent Brut d'Exploitation", "Endettement Brut Total Annuel", "Estimation Brute des D√©penses", "Aucune de ces r√©ponses", "Exc√©dent Brut d'Exploitation"]
    ];

    // --- Insertion des donn√©es ---

    if (coursSheet && coursData.length > 0) {
      coursSheet.getRange(coursSheet.getLastRow() + 1, 1, coursData.length, coursData[0].length).setValues(coursData);
    }
    if (modulesSheet && modulesData.length > 0) {
      modulesSheet.getRange(modulesSheet.getLastRow() + 1, 1, modulesData.length, modulesData[0].length).setValues(modulesData);
    }
    if (chapitresSheet && chapitresData.length > 0) {
      chapitresSheet.getRange(chapitresSheet.getLastRow() + 1, 1, chapitresData.length, chapitresData[0].length).setValues(chapitresData);
    }
    if (quizChapitresSheet && quizData.length > 0) {
      quizChapitresSheet.getRange(quizChapitresSheet.getLastRow() + 1, 1, quizData.length, quizData[0].length).setValues(quizData);
    }
    if (quizModulesSheet) {
      // Pas de donn√©es de quiz de module pour l'instant
    }

    ui.alert("Donn√©es de d√©monstration ajout√©es avec succ√®s !");

  } catch (e) {
    ui.alert("Erreur lors de l'ajout des donn√©es de d√©mo : " + e.message);
  }
}

/**
 * NOUVEAU: Supprime toutes les donn√©es (sauf les en-t√™tes) des feuilles de cours.
 */
function clearDemoData() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();

  const response = ui.alert(
    'Confirmation',
    'Voulez-vous vraiment supprimer toutes les donn√©es des feuilles de cours (les en-t√™tes seront conserv√©s) ? Cette action est irr√©versible.',
    ui.ButtonSet.YES_NO
  );

  if (response !== ui.Button.YES) {
    ui.alert('Op√©ration annul√©e.');
    return;
  }

  try {
    const allSheets = ss.getSheets();
    let clearedCount = 0;

    allSheets.forEach(sheet => {
      const sheetName = sheet.getName();
      // Cible uniquement les feuilles qui suivent la structure des cours
      if (sheetName.startsWith('Cours_') || sheetName.startsWith('Modules_') || sheetName.startsWith('Chapitres_') || sheetName.startsWith('Quiz_')) {
        const lastRow = sheet.getLastRow();
        if (lastRow > 1) {
          sheet.getRange(2, 1, lastRow - 1, sheet.getLastColumn()).clearContent();
          clearedCount++;
        }
      }
    });

    ui.alert(`${clearedCount} feuille(s) ont √©t√© nettoy√©es.`);
    invalidateGlobalCache(); // Invalider le cache apr√®s suppression

  } catch (e) {
    ui.alert("Erreur lors de la suppression des donn√©es : " + e.message);
  }
}

// --- NOUVEAU: Fonctions de gestion de contenu via le menu ---

/**
 * Affiche une bo√Æte de dialogue pour ajouter un nouveau cours.
 */
function addCourse() {
  const ui = SpreadsheetApp.getUi();
  const categoryName = getCategoryName();
  const coursSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(`Cours_${categoryName}`);

  if (!coursSheet) {
    ui.alert(`La feuille "Cours_${categoryName}" est introuvable.`);
    return;
  }

  const result = ui.prompt(
    'Ajouter un nouveau cours',
    'Entrez le nom du nouveau cours :',
    ui.ButtonSet.OK_CANCEL
  );

  if (result.getSelectedButton() == ui.Button.OK && result.getResponseText()) {
    const courseName = result.getResponseText().trim();
    const newId = `C-${new Date().getTime().toString().slice(-6)}`;
    
    // Ajoute une nouvelle ligne avec l'ID et le nom, les autres champs sont √† remplir manuellement.
    coursSheet.appendRow([newId, courseName]);
    ui.alert(`Cours "${courseName}" ajout√© avec l'ID ${newId}. Veuillez compl√©ter les autres informations dans la ligne.`);
  }
}

/**
 * Affiche une bo√Æte de dialogue pour ajouter un nouveau module √† un cours.
 */
function addModule() {
  const ui = SpreadsheetApp.getUi();
  const categoryName = getCategoryName();
  const modulesSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(`Modules_${categoryName}`);

  if (!modulesSheet) {
    ui.alert(`La feuille "Modules_${categoryName}" est introuvable.`);
    return;
  }

  let courseId = ui.prompt('ID du Cours', '√Ä quel ID de cours ce module appartient-il ? (ex: C-001)', ui.ButtonSet.OK_CANCEL);
  if (courseId.getSelectedButton() !== ui.Button.OK || !courseId.getResponseText()) return;
  courseId = courseId.getResponseText().trim();

  let moduleName = ui.prompt('Nom du Module', 'Entrez le nom du nouveau module :', ui.ButtonSet.OK_CANCEL);
  if (moduleName.getSelectedButton() !== ui.Button.OK || !moduleName.getResponseText()) return;
  moduleName = moduleName.getResponseText().trim();

  let moduleDesc = ui.prompt('Description du Module', 'Entrez une courte description pour ce module :', ui.ButtonSet.OK_CANCEL);
  moduleDesc = moduleDesc.getResponseText().trim();

  // Calculer le prochain num√©ro d'ordre pour ce cours
  const allModules = sheetToJSON(modulesSheet);
  const modulesForCourse = allModules.filter(m => m.ID_Cours == courseId);
  const nextOrder = modulesForCourse.length + 1;

  const newId = `M-${courseId.split('-')[1]}-${nextOrder}`;

  modulesSheet.appendRow([courseId, newId, moduleName, moduleDesc, "", nextOrder]);
  ui.alert(`Module "${moduleName}" (Ordre: ${nextOrder}) ajout√© au cours ${courseId}.`);
}

/**
 * Affiche une bo√Æte de dialogue pour ajouter un nouveau chapitre √† un module.
 */
function addChapter() {
  const ui = SpreadsheetApp.getUi();
  const categoryName = getCategoryName();
  const chapitresSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(`Chapitres_${categoryName}`);

  if (!chapitresSheet) {
    ui.alert(`La feuille "Chapitres_${categoryName}" est introuvable.`);
    return;
  }

  let moduleId = ui.prompt('ID du Module', '√Ä quel ID de module ce chapitre appartient-il ? (ex: M-001-1)', ui.ButtonSet.OK_CANCEL);
  if (moduleId.getSelectedButton() !== ui.Button.OK || !moduleId.getResponseText()) return;
  moduleId = moduleId.getResponseText().trim();

  let chapterName = ui.prompt('Nom du Chapitre', 'Entrez le nom du nouveau chapitre :', ui.ButtonSet.OK_CANCEL);
  if (chapterName.getSelectedButton() !== ui.Button.OK || !chapterName.getResponseText()) return;
  chapterName = chapterName.getResponseText().trim();

  let duration = ui.prompt('Dur√©e', 'Entrez la dur√©e du chapitre (ex: 7min, 1h15) :', ui.ButtonSet.OK_CANCEL);
  if (duration.getSelectedButton() !== ui.Button.OK || !duration.getResponseText()) return;
  duration = duration.getResponseText().trim();

  // Calculer le prochain num√©ro d'ordre pour ce module
  const allChapters = sheetToJSON(chapitresSheet);
  const chaptersForModule = allChapters.filter(c => c.ID_Module == moduleId);
  const nextOrder = chaptersForModule.length + 1;

  const newId = `CH-${moduleId.split('-')[1]}-${moduleId.split('-')[2]}-${nextOrder}`;

  chapitresSheet.appendRow([moduleId, newId, chapterName, "", duration, "", nextOrder]);
  ui.alert(`Chapitre "${chapterName}" (Ordre: ${nextOrder}) ajout√© au module ${moduleId}.`);
}

/**
 * NOUVEAU: Ajoute un cours √† partir d'une requ√™te POST (ex: tableau de bord).
 */
function addCourseFromDashboard(data, origin) {
  try {
    const categoryName = getCategoryName();
    const coursSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(`Cours_${categoryName}`);
    if (!coursSheet) {
      throw new Error(`Feuille "Cours_${categoryName}" introuvable.`);
    }

    const newId = `C-${new Date().getTime().toString().slice(-6)}`;
    
    // Pr√©parer la ligne avec les donn√©es fournies, en respectant l'ordre des colonnes
    // ["ID_Cours", "Nom_Cours", "R√©sum√©", "Dur√©e_Totale", "Niveau", "Prix", "URL_Vid√©o_Intro", "Image_Couverture", "Freemium_Start", "Freemium_End", "Objectifs", "Pr√©requis", "Avantage_Senior", "Public_Cible", "Formateur_Nom", "Formateur_Titre", "Formateur_Bio", "Note_Moyenne", "Avis"]
    const newRow = [
      newId,                // ID_Cours
      data.nom,               // Nom_Cours
      data.resume,            // R√©sum√©
      data.duree,             // Dur√©e_Totale
      data.niveau,            // Niveau
      data.prix,              // Prix
      data.videoIntro,        // URL_Vid√©o_Intro
      data.imageCouverture,   // Image_Couverture
      "0",                    // Freemium_Start (valeur par d√©faut)
      "1200",                 // Freemium_End (valeur par d√©faut, 20min)
      data.objectifs,         // Objectifs
      data.prerequis,         // Pr√©requis
      data.avantageSenior || `Le savoir-faire d'un expert.`, // Avantage_Senior (avec une valeur par d√©faut)
      data.publicCible,       // Public_Cible
      data.formateurNom,      // Formateur_Nom
      data.formateurTitre,    // Formateur_Titre
      data.formateurBio,      // Formateur_Bio
      "0",                    // Note_Moyenne (initiale)
      "0 Avis"                // Avis (initial)
    ];

    coursSheet.appendRow(newRow);
    invalidateGlobalCache(); // Important pour que le nouveau cours apparaisse
    return createJsonResponse({ success: true, id: newId, message: "Cours ajout√© avec succ√®s." }, origin);
  } catch (e) {
    return createJsonResponse({ success: false, error: e.message }, origin);
  }
}
